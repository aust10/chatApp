{"version":3,"sources":["chat.js","rooms.js","home.js","signup.js","loggedOut.js","App.js","serviceWorker.js","index.js"],"names":["Message","props","className","Date","message","date","toLocaleString","user","username","text","onClick","del","Chat","state","form","messages","formValue","room","this","match","params","setState","evt","preventDefault","token","handleSubmit","target","value","console","log","delContent","_id","handleDelete","id","filter","msg","map","i","key","deleteMessage","bind","onSubmit","sendMessage","type","placeholder","onChange","handleChangeFormInput","React","Component","withRouter","Rooms","history","useHistory","loggedIn","prompt","push","htmlFor","name","rooms","Home","onHandle","Signup","socket","io","App","on","concat","document","getElementById","password","fetch","method","headers","body","JSON","stringify","then","response","json","data","Authorization","emit","filtered","Array","from","Set","to","handleLogOut","path","handleLogin","pathname","handleSignUp","getRooms","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.fa14cbd7.chunk.js","sourcesContent":["import React from 'react'\r\nimport socket from 'socket.io-client'\r\n// import {\r\n//   useParams\r\n// } from 'react-router-dom'\r\nimport { withRouter } from 'react-router'\r\n\r\n// This function creates the format for each message\r\nfunction Message (props) {\r\n  return <li className='message-item'>\r\n    <span className='date'>{(new Date(props.message.date)).toLocaleString()}</span>\r\n    <span className='nick'> {props.message.user.username}: </span>\r\n    <span className='text'>{props.message.text} </span>\r\n    {props.message.user.username === props.username ? <span className='del'><button onClick={() => props.del(props.message)}>Delete</button></span> : null}\r\n         </li>\r\n}\r\n\r\n// Create a class that can hold state for the messages that the user submits\r\nclass Chat extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      form: '',\r\n      messages: this.props.messages,\r\n      formValue: '',\r\n      room: ''\r\n    }\r\n  }\r\n\r\n  // When the selector is switchecd this set state will set the state for the messages to be produced and submited\r\n  componentDidMount () {\r\n    const room = this.props.match.params.room\r\n    this.setState({ room: room })\r\n  }\r\n\r\n  // Handle when the Submit button is pressed to send a new message\r\n  sendMessage (evt) {\r\n    evt.preventDefault()\r\n    // get the context of each message and send the object based on the stat and forms value\r\n    const message = { text: this.state.formValue, username: this.props.username, room: this.state.room, date: new Date(), token: this.props.token }\r\n\r\n    // call the handleSubmit function that is passed from App.js\r\n    this.props.handleSubmit(message)\r\n  }\r\n\r\n  // Handle the form inputs change, this happens every time a key is pressed\r\n  handleChangeFormInput (evt) {\r\n    this.setState({ formValue: evt.target.value })\r\n  }\r\n\r\n  deleteMessage (evt) {\r\n    console.log(evt)\r\n    const delContent = { text: evt.text, user: evt.user._id }\r\n    console.log(delContent, 'this is del content line 54')\r\n    this.props.handleDelete(delContent)\r\n  }\r\n\r\n  // A Class calls a render and a return of jsx, here we filter out the messages acording to the selected room and pass the props to the function component above that makes the layout of message\r\n  render () {\r\n    return (\r\n      <div id='chatroom'>\r\n        <h1>{this.state.room}</h1>\r\n        <div id='chatbox'>\r\n        <ul id='messages'>\r\n          {this.props.messages.filter(msg => msg.room === this.state.room).map((msg, i) => <Message message={msg} key={i} del={this.deleteMessage.bind(this)} username={this.props.username} />)}\r\n        </ul>\r\n        </div><br />\r\n        <form id='send-message' onSubmit={this.sendMessage.bind(this)}>\r\n          <input id='message-text' type='text' placeholder='message...' value={this.formValue} onChange={this.handleChangeFormInput.bind(this)} />\r\n          <button type='submit'>Send</button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(Chat)\r\n","import React from 'react'\r\nimport {\r\n  useHistory\r\n} from 'react-router-dom'\r\n\r\n// This is a functional component that handles the rooms\r\nexport default function Rooms (props) {\r\n  const history = useHistory()\r\n\r\n  // Hanlder function that handles when the user changes rooms and pushes to that selected room\r\n  function handleChangeRoom (evt) {\r\n    const room = evt.target.value\r\n    history.push(`/rooms/${room}`)\r\n    console.log(history, 'this is history')\r\n  }\r\n\r\n  // Handler function that sends a prompt to the user allowing them to enter a room and then pushes to that room they created\r\n  function handleAddRoom () {\r\n    const room = prompt('Enter a room name')\r\n    history.push(`/rooms/${room}`)\r\n  }\r\n\r\n  // return jsx, this is the room selector\r\n  return <div id='rooms'>\r\n    {props.loggedIn ? <h1>Hi {props.username}!</h1> : <h1>Please log in.</h1>}\r\n\r\n    <button onClick={handleAddRoom}>Add Room</button><br />\r\n    <label htmlFor='room-select'>Change Room: </label>\r\n    <select onChange={handleChangeRoom} name='room' id='room-select' value={props.room}>\r\n      <option value=''>--Select a Room--</option>\r\n      {props.rooms.map(room => <option key={room} value={room}>{room}</option>)}\r\n    </select>\r\n  </div>\r\n}\r\n","import React from 'react'\r\n\r\n// This is a functional component that returns the jsx that is produced on our login page\r\nexport default function Home (props) {\r\n  return <div id='chatroom'>\r\n    <form onSubmit={props.onHandle}>\r\n      <label>Username:</label>\r\n      <input type='text' id='username' /><br /><br />\r\n      <label>Password:</label>\r\n      <input type='password' id='password' />\r\n      <br /><br />\r\n      <input type='submit' value='submit' key='submit' id='submitButton' />\r\n    </form>\r\n  </div>\r\n}\r\n","import React from 'react'\r\n\r\n// This is a functional component for sign up, it returns jsx for the Sign up page\r\nexport default function Signup (props) {\r\n  return <div id='chatroom'>\r\n    <form onSubmit={props.onHandle}>\r\n      <label>Username:</label>\r\n      <input type='text' id='username' /><br /><br />\r\n      <label>Password:</label>\r\n      <input type='password' id='password' />\r\n      <br /><br />\r\n      <input type='submit' value='submit' key='submit' id='submitButton' />\r\n    </form>\r\n  </div>\r\n}\r\n","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n// this is a function component that handles the loggout funcgtion and calls useHistory to push to the '/' route and returns jsx that is the login menu\r\nexport default function Home (props) {\r\n  function LoggedOut () {\r\n    const history = useHistory()\r\n    history.push('/')\r\n  }\r\n  LoggedOut()\r\n  return <div id='chatroom'>\r\n    <h1>Welcome</h1>\r\n    <form onSubmit={props.onHandle}>\r\n      <label>Username</label>\r\n      <input type='text' id='nickname' />\r\n      <label>Password</label>\r\n      <input type='password' />\r\n      <input type='submit' value='submit' key='submit' />\r\n    </form>\r\n  </div>\r\n}\r\n","/* globals fetch prompt */\r\nimport Chat from './chat'\r\nimport Rooms from './rooms'\r\nimport Home from './home'\r\nimport Signup from './signup'\r\nimport LoggedOut from './loggedOut'\r\nimport React from 'react'\r\nimport io from 'socket.io-client'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect\r\n} from 'react-router-dom'\r\n\r\n// const http = require('http')\r\n\r\n// call io here so that you can use it in other components\r\nconst socket = io()\r\n\r\n// create a class in order to be able to store the state of the messages and users information\r\nclass App extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      messages: [],\r\n      room: '',\r\n      formValue: '',\r\n      loggedIn: false,\r\n      username: '',\r\n      token: ''\r\n    }\r\n  }\r\n\r\n  // componentDidMount returns the initial messages on page load\r\n  componentDidMount () {\r\n    socket.on('chat message', msg => {\r\n      console.log('Got a message:', msg)\r\n      this.setState({ messages: this.state.messages.concat(msg) })\r\n    })\r\n  }\r\n\r\n  // Handel when the login button is pressed\r\n  handleLogin (evt) {\r\n    evt.preventDefault()\r\n    const username = document.getElementById('username').value\r\n    const password = document.getElementById('password').value\r\n    console.log(username, 'this is the username')\r\n\r\n    // Send a POST request to login \"located in auth.js\" (this verifys the user is valid)\r\n    // Handle the Get Messages in the promise of the first Fetch request \"/messages is found in protected.js\"\r\n    fetch('/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        username: username,\r\n        password: password\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // in order to call this.setstate and the fetch in this promis you need to use the async promise\r\n        // do this by saying setState({}, () => {})\r\n        this.setState({ token: data.token, username: data.username, loggedIn: true }, () => {\r\n          console.log(this.state, 'this is the states username')\r\n          fetch('/messages', {\r\n            method: 'GET',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          })\r\n            .then(response => response.json())\r\n            // Once the \"GET\" request runs handle the promise by setting the state with the messages that come back\r\n            .then(data => this.setState({ messages: data }, () => { console.log(data, 'this is the data we are getting on login') }))\r\n        }\r\n        )\r\n      })\r\n  }\r\n\r\n  // Handle when the Sign up Button is pressed\r\n  handleSignUp (evt) {\r\n    evt.preventDefault()\r\n    const username = document.getElementById('username').value\r\n    const password = document.getElementById('password').value\r\n\r\n    // Send a \"POST\" request to sign up located in \"auth.js\"\r\n    // With the promise set the state with the token and username that comes back\r\n    fetch('/sign-up', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        username: username,\r\n        password: password\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.setState({ token: data.token, username: data.username, loggedIn: true }, () => {\r\n          fetch('/messages', {\r\n            method: 'GET',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: `Bearer ${this.state.token}`\r\n            }\r\n          })\r\n            .then(response => response.json())\r\n            // Once the \"GET\" request runs handle the promise by setting the state with the messages that come back\r\n            .then(data => this.setState({ messages: data }, () => { console.log(data, 'this is the data we are getting on login') }))\r\n        })\r\n        console.log(this.state)\r\n      })\r\n  }\r\n\r\n  // Handle when the Logout button is pressed\r\n  handleLogOut () {\r\n    // Set the state reflecting that everything is null and no user is signed in\r\n    this.setState({\r\n      loggedIn: false,\r\n      username: '',\r\n      messages: [],\r\n      room: '',\r\n      formValue: '',\r\n      token: ''\r\n    })\r\n  }\r\n\r\n  // Handle when the Submit button is pressed\r\n  handleSubmit (message) {\r\n    // This sends an emit to \"socketcontroller.js\" with the messaged data that the user submits\r\n    socket.emit('chat message', message)\r\n  }\r\n\r\n  handleDelete (delContent) {\r\n\r\n    console.log(delContent, 'this is del content line 140')\r\n    fetch('/messages', {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${this.state.token}`\r\n      },\r\n      body:\r\n        JSON.stringify(delContent)\r\n    })\r\n      .then(response => console.log(response))\r\n    fetch('/messages', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${this.state.token}`\r\n      }\r\n    })\r\n      .then(response => response.json())\r\n      // Once the \"GET\" request runs handle the promise by setting the state with the messages that come back\r\n      .then(data => this.setState({ messages: data }, () => { console.log(data, 'this is the data we are getting on delete') }))\r\n  }\r\n\r\n  // This gets the rooms and filters out duplicates for the select feture in the rooms component\r\n  getRooms () {\r\n    const rooms = this.state.messages.map(msg => msg.room)\r\n    // we have to add the currentRoom to the list, otherwise it won't be an option if there isn't already a message with that room\r\n    rooms.push(this.state.room)\r\n    // filter out undefined or empty string\r\n    const filtered = rooms.filter(room => room)\r\n    // filters out the duplicates\r\n    return Array.from(new Set(filtered))\r\n  }\r\n\r\n  // with a Class you need to have a render() that has a return and in this case a router\r\n  render () {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <nav>\r\n            {this.state.loggedIn ? <div><span className='linkTo'><Link to='/'><button type='button'>Back</button></Link></span><span className='linkTo' onClick={this.handleLogOut.bind(this)}><Link to='/logout'><button type='button'>Logout</button></Link></span></div> : <div><span className='linkTo'><Link to='/'><button type='button'>Home</button></Link></span><span className='linkTo'><Link to='/login'><button type='button'>Login</button></Link></span><span className='linkTo'><Link to='/signup'><button type='button'>Signup</button></Link></span></div>}\r\n          </nav>\r\n\r\n          {/* Make sure your passing the proper props to each component */}\r\n          <div id='main-wrap'>\r\n            <Switch>\r\n              <Route path='/rooms/:room'>\r\n                <Chat messages={this.state.messages} room={this.state.room} formValue={this.state.formValue} username={this.state.username} token={this.state.token} handleSubmit={this.handleSubmit.bind(this)} handleDelete={this.handleDelete.bind(this)} />\r\n              </Route>\r\n              <Route path='/login'>\r\n                <h1>Login</h1>\r\n                <Home onHandle={this.handleLogin.bind(this)} />\r\n                {this.state.loggedIn ? <Redirect to={{ pathname: '/' }} /> : null}\r\n              </Route>\r\n              <Route path='/logout'>\r\n                <h1>Logged Out</h1>\r\n                {/* <LoggedOut onHandle = {this.handleLogOut.bind(this)} /> */}\r\n                <LoggedOut />\r\n              </Route>\r\n              <Route path='/signup'>\r\n                <h1>Sign-Up</h1>\r\n                <Signup onHandle={this.handleSignUp.bind(this)} />\r\n                {this.state.loggedIn ? <Redirect to={{ pathname: '/login' }} /> : null}\r\n              </Route>\r\n              <Route path='/'>\r\n                <h1>Welcome to the Project Chat Homepage</h1>\r\n                {this.state.loggedIn ? <Rooms\r\n                  loggedIn={this.state.loggedIn}\r\n                  username={this.state.username}\r\n                  room={this.state.room}\r\n                  rooms={this.getRooms()} /> : <h1>Please log in.</h1>}\r\n              </Route>\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","/* globals prompt */\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}